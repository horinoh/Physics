#include "Convex.h"

//!< 頂点を「なるべく」包含するような四面体を作成
void Convex::BuildTetrahedron(const std::vector<Math::Vec3>& Pts, std::vector<Math::Vec3>& Vertices, std::vector<Collision::TriInds >& Indices)
{
	//!< 特定の軸 (ここではX) に一番遠い点
	std::array<Math::Vec3, 4> P = { *Collision::Distance::Farthest(Pts, Math::Vec3::AxisX()) };
	//< 前出の逆向きの軸軸に一番遠い点
	P[1] = *Collision::Distance::Farthest(Pts, -P[0]);
	//!< 前出の 2 点からなる線分に一番遠い点
	P[2] = *Collision::Distance::Farthest(Pts, P[0], P[1]);
	//!< 前出の 3 点からなる三角形に一番遠い点
	P[3] = *Collision::Distance::Farthest(Pts, P[0], P[1], P[2]);

	//!< CCW になるように調整
	if (Collision::Distance::IsFront(P[0], P[1], P[2], P[3])) {
		std::swap(P[0], P[1]);
	}

	//!< 四面体の頂点
	Vertices.emplace_back(P[0]);
	Vertices.emplace_back(P[1]);
	Vertices.emplace_back(P[2]);
	Vertices.emplace_back(P[3]);

	//!< 四面体のインデックス
	Indices.emplace_back(Collision::TriInds({ 0, 1, 2 }));
	Indices.emplace_back(Collision::TriInds({ 0, 2, 3 }));
	Indices.emplace_back(Collision::TriInds({ 2, 1, 3 }));
	Indices.emplace_back(Collision::TriInds({ 1, 0, 3 }));
}

void Convex::CollectUniqueEdges(std::vector<Collision::TriInds>::const_iterator Begin, std::vector<Collision::TriInds>::const_iterator End, std::vector<Collision::EdgeIndsCount>& EdgeCounts)
{
	std::for_each(Begin, End, [&](const auto& i) {
		const std::array Edges = {
			Collision::EdgeInds({ i[0], i[1] }),
			Collision::EdgeInds({ i[1], i[2] }),
			Collision::EdgeInds({ i[2], i[0] }),
		};
		std::ranges::for_each(Edges, [&](const auto& j) {
			//!< 既出の辺かどうかを調べる (真逆も既出として扱う)
			const auto It = std::ranges::find_if(EdgeCounts, [&](const auto& k) {
				return (k.first[0] == j[0] && k.first[1] == j[1]) || (k.first[0] == j[1] && k.first[1] == j[0]);
			});
			if (std::cend(EdgeCounts) == It) {
				//!< 新規の辺として追加
				EdgeCounts.emplace_back(Collision::EdgeIndsCount({ j, 0 }));
			}
			else {
				//!< 既出の辺となったらカウンタをインクリメントして情報を更新
				++It->second;
			}
		});
	});

	//!< ユニークでない辺 (カウンタが 0 より大きい) を削除
	const auto Range = std::ranges::remove_if(EdgeCounts, [](const auto& i) { return i.second > 0; });
	EdgeCounts.erase(std::ranges::cbegin(Range), std::ranges::cend(EdgeCounts));
}

//!< ハイポリを食わせるとかなり時間がかかる上に結局ハイポリの凸包ができるだけなのでコリジョンとして現実的ではない、ローポリを食わせること
void Convex::BuildConvexHull(const std::vector<Math::Vec3>& Pts, std::vector<Math::Vec3>& Vertices, std::vector<Collision::TriInds>& Indices)
{
	//LOG(data(std::format("Building convex hull...\n")));

	//!< まずは「なるべく」包含するような四面体を作成
	BuildTetrahedron(Pts, Vertices, Indices);

	//!< 内部点の除外 -> 外部点が残る
	auto External = Pts;
	RemoveInternal(Vertices, Indices, External);

	//!< 外部点が無くなるまで繰り返す
	while (!std::empty(External)) {
		//LOG(data(std::format("Rest vertices = {}\n", size(External))));

		//!< 最遠点を見つける
		const auto ExFarIt = Collision::Distance::Farthest(External, External[0]);

		std::vector<Collision::EdgeIndsCount> DanglingEdges;
		{
			//!< 最遠点を向いていない三角形 (A) と、向いている三角形 (B) に分割
			//!< partition は以下のように返す
			//!<	A ラムダ式が true	: [begin(Indices), begin(Range)]
			//!<	B ラムダ式が false	: [begin(Range), end(Range)]
			const auto Range = std::ranges::partition(Indices, [&](const auto& i) {
				return !Collision::Distance::IsFront(*ExFarIt, Vertices[i[0]], Vertices[i[1]], Vertices[i[2]]);
			});

			//!< A, B の境界となるような辺を収集する (B の中から他の三角形と辺を共有しないユニークな辺のみを収集すれば良い)
			CollectUniqueEdges(std::ranges::cbegin(Range), std::ranges::cend(Range), DanglingEdges);

			//!< (辺は収集済) ここまで来たら B は削除してよい  
			Indices.erase(std::ranges::cbegin(Range), std::ranges::cend(Range));
		}

		//!< 凸包の更新
		{
			//!< 最遠点を頂点として追加する
			Vertices.emplace_back(*ExFarIt);

			//!< 最遠点のインデックス
			const auto FarIndex = static_cast<uint32_t>(std::size(Vertices) - 1);
			//!< 最遠点とユニーク辺からなる三角形群を追加
			std::ranges::transform(DanglingEdges, std::back_inserter(Indices), [&](const auto& i) {
				return Collision::TriInds({ i.first[0], i.first[1], FarIndex });
			});
		}

		//!< 外部点の更新
		{
			//!< ここまで済んだら最遠点は削除してよい
			External.erase(ExFarIt);

			//!< 更新した凸包に対して内部点を削除する
			RemoveInternal(Vertices, Indices, External);
		}
	}
}